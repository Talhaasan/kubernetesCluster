- name: go-producer
  hosts: localhost
  gather_facts: False

  vars:

    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    image_name: producer
    image_tag: 1.0
    replicas: 4

  pre_tasks:

    - name: check the status of minikube.
      command: minikube status
      register: minikube_status
      changed_when: false
      ignore_errors: true

    - name: start minikube if it's not running.
      command: minikube start --vm = true
      when: "not minikube_status.stdout or 'Running' not in minikube_status.stdout"

  tasks:

    - name: get existing image hash.
      shell: |
        eval $(minikube docker-env)
        docker images -q {{ image_name }}
      register: image_hash
      changed_when: false

    - name: build image if it's not already built.
      shell: |
        eval $(minikube docker-env)
        docker build -t {{ image_name }}:{{ image_tag }} .
      when: not image_hash.stdout

    - name: create a deployment for Go Producer Service.
      k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: producer
            namespace: default
          spec:
            replicas: "{{ replicas }}"
            selector:
              matchLabels:
                app: producer
            template:
              metadata:
                labels:
                  app: producer
              spec:
                containers:
                  - name: producer
                    image: "{{ image_name }}:{{ image_tag }}"
                    imagePullPolicy: IfNotPresent
                    ports:
                      - containerPort: 8181

    - name: create a service for Producer.
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: producer
            namespace: default
          spec:
            type: LoadBalancer
            ports:
              - port: 8181
                targetPort: 8181
            selector:
              app: producer

  post_tasks:

    - name: exposing Go Producer Service on the host via Minikube.
      command: minikube service go-producer --url
      changed_when: false
      register: producer_service

    - debug:
        msg: "Go Producer Service: {{ producer_service['stdout_lines'][0] }}"

    - name: verify Go Producer Service is responding.
      uri:
        url: "{{ producer_service['stdout_lines'][0] }}/test"
        return_content: true
      register: go_producer
      failed_when: "'/test' not in go_producer.content"

    - debug:
        msg: "Testing URL  GO Producer Service Requested: {{go_producer.content}} Status: {{go_producer.status}}"

- name: go-consumer
  hosts: localhost
  gather_facts: False

  vars:
    ansible_python_interpreter: '{{ ansible_playbook_python }}'
    image_name: consumer
    image_tag: 1.0
    replicas: 4

  pre_tasks:
    - name: check the status of minikube.
      command: minikube status
      register: minikube_status
      changed_when: false
      ignore_errors: true

    - name: start minikube if it's not running.
      command: minikube start --vm = true
      when: "not minikube_status.stdout or 'Running' not in minikube_status.stdout"

  tasks:

    - name: get existing image hash.
      shell: |
        eval $(minikube docker-env)
        docker images -q {{ image_name }}
      register: image_hash
      changed_when: false

    - name: build image if it's not already built.
      shell: |
        eval $(minikube docker-env)
        docker build -t {{ image_name }}:{{ image_tag }} .
      when: not image_hash.stdout

    - name: create a deployment for Go Consumer Services.
      k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: consumer
            namespace: default
          spec:
            replicas: "{{ replicas }}"
            selector:
              matchLabels:
                app: consumer
            template:
              metadata:
                labels:
                  app: consumer
              spec:
                containers:
                  - name: consumer
                    image: "{{ image_name }}:{{ image_tag }}"
                    imagePullPolicy: IfNotPresent
                    ports:
                      - containerPort: 8181

    - name: create a service for Consumer.
      k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: consumer
            namespace: default
          spec:
            type: LoadBalancer
            ports:
              - port: 8181
                targetPort: 8181
            selector:
              app: consumer

  post_tasks:

    - name: exposing Go Consumer Service on the host via Minikube.
      command: minikube service go-consumer --url
      changed_when: false
      register: consumer_service

    - debug:
        msg: "Go Consumer Service: {{ consumer_service['stdout_lines'][0] }}"

    - name: verify Go Consumer Service is responding.
      uri:
        url: "{{ minikube_service['stdout_lines'][0] }}/test"
        return_content: true
      register: go_consumer
      failed_when: "'/test' not in go_consumer.content"

    - debug:
        msg: "Testing URL  GO Producer Service Requested: {{go_consumer.content}} Status: {{go_consumer.status}}"
